// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens(user_id, token_hash, issued_at, expires_at, user_agent, ip)
VALUES(
     $1,
     $2,
     $3,
     $4,
     $5,
     $6
)
RETURNING user_id, token_hash, issued_at, expires_at, revoked_at, user_agent, ip
`

type CreateRefreshTokenParams struct {
	UserID    uuid.UUID
	TokenHash string
	IssuedAt  time.Time
	ExpiresAt time.Time
	UserAgent string
	Ip        string
}

type CreateRefreshTokenRow struct {
	UserID    uuid.UUID
	TokenHash string
	IssuedAt  time.Time
	ExpiresAt time.Time
	RevokedAt sql.NullTime
	UserAgent string
	Ip        string
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (CreateRefreshTokenRow, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken,
		arg.UserID,
		arg.TokenHash,
		arg.IssuedAt,
		arg.ExpiresAt,
		arg.UserAgent,
		arg.Ip,
	)
	var i CreateRefreshTokenRow
	err := row.Scan(
		&i.UserID,
		&i.TokenHash,
		&i.IssuedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserAgent,
		&i.Ip,
	)
	return i, err
}

const deleteExpiredRefreshTokens = `-- name: DeleteExpiredRefreshTokens :exec
DELETE FROM refresh_tokens
WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredRefreshTokens(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredRefreshTokens)
	return err
}

const getActiveRefreshTokenByHash = `-- name: GetActiveRefreshTokenByHash :one
SELECT id, user_id, token_hash, issued_at, expires_at, revoked_at, user_agent, ip
FROM refresh_tokens
WHERE token_hash = $1
AND revoked_at IS NULL
AND expires_at > NOW()
`

func (q *Queries) GetActiveRefreshTokenByHash(ctx context.Context, tokenHash string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getActiveRefreshTokenByHash, tokenHash)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.IssuedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserAgent,
		&i.Ip,
	)
	return i, err
}

const getRefreshTokenByHash = `-- name: GetRefreshTokenByHash :one
SELECT id, user_id, token_hash, issued_at, expires_at, revoked_at, user_agent, ip
FROM refresh_tokens
WHERE token_hash = $1
`

func (q *Queries) GetRefreshTokenByHash(ctx context.Context, tokenHash string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByHash, tokenHash)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TokenHash,
		&i.IssuedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserAgent,
		&i.Ip,
	)
	return i, err
}

const listActiveTokensForUser = `-- name: ListActiveTokensForUser :many
SELECT id, user_id, issued_at, expires_at, user_agent, ip
FROM refresh_tokens
WHERE user_id = $1 AND revoked_at IS NULL AND expires_at > NOW()
ORDER BY issued_at DESC
`

type ListActiveTokensForUserRow struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	IssuedAt  time.Time
	ExpiresAt time.Time
	UserAgent string
	Ip        string
}

func (q *Queries) ListActiveTokensForUser(ctx context.Context, userID uuid.UUID) ([]ListActiveTokensForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listActiveTokensForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListActiveTokensForUserRow
	for rows.Next() {
		var i ListActiveTokensForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.IssuedAt,
			&i.ExpiresAt,
			&i.UserAgent,
			&i.Ip,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeAllRefreshTokensForUser = `-- name: RevokeAllRefreshTokensForUser :exec
UPDATE refresh_tokens
SET revoked_at = NOW()
WHERE user_id = $1 AND revoked_at IS NULL
`

func (q *Queries) RevokeAllRefreshTokensForUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, revokeAllRefreshTokensForUser, userID)
	return err
}

const revokeRefreshTokenByID = `-- name: RevokeRefreshTokenByID :exec
UPDATE refresh_tokens 
SET revoked_at = NOW()
WHERE id=$1 AND revoked_at IS NULL
`

func (q *Queries) RevokeRefreshTokenByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshTokenByID, id)
	return err
}

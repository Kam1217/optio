// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: session_participant.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createSessionParticipant = `-- name: CreateSessionParticipant :one
INSERT INTO session_participant (user_id, session_id)
VALUES(
    $1,
    $2
)
RETURNING user_id, session_id, joined_at, status
`

type CreateSessionParticipantParams struct {
	UserID    uuid.UUID
	SessionID uuid.UUID
}

func (q *Queries) CreateSessionParticipant(ctx context.Context, arg CreateSessionParticipantParams) (SessionParticipant, error) {
	row := q.db.QueryRowContext(ctx, createSessionParticipant, arg.UserID, arg.SessionID)
	var i SessionParticipant
	err := row.Scan(
		&i.UserID,
		&i.SessionID,
		&i.JoinedAt,
		&i.Status,
	)
	return i, err
}

const deleteSessionParticipant = `-- name: DeleteSessionParticipant :exec
DELETE FROM session_participant
WHERE user_id = $1 AND session_id = $2
`

type DeleteSessionParticipantParams struct {
	UserID    uuid.UUID
	SessionID uuid.UUID
}

func (q *Queries) DeleteSessionParticipant(ctx context.Context, arg DeleteSessionParticipantParams) error {
	_, err := q.db.ExecContext(ctx, deleteSessionParticipant, arg.UserID, arg.SessionID)
	return err
}

const getAllSessionParticipants = `-- name: GetAllSessionParticipants :many
SELECT user_id, session_id, joined_at, status
FROM session_participant
WHERE session_id = $1
ORDER BY joined_at DESC
LIMIT $2 OFFSET $3
`

type GetAllSessionParticipantsParams struct {
	SessionID uuid.UUID
	Limit     int32
	Offset    int32
}

func (q *Queries) GetAllSessionParticipants(ctx context.Context, arg GetAllSessionParticipantsParams) ([]SessionParticipant, error) {
	rows, err := q.db.QueryContext(ctx, getAllSessionParticipants, arg.SessionID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionParticipant
	for rows.Next() {
		var i SessionParticipant
		if err := rows.Scan(
			&i.UserID,
			&i.SessionID,
			&i.JoinedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionParticipant = `-- name: GetSessionParticipant :one
SELECT user_id, session_id, joined_at, status
FROM session_participant
WHERE user_id = $1 AND session_id = $2
`

type GetSessionParticipantParams struct {
	UserID    uuid.UUID
	SessionID uuid.UUID
}

func (q *Queries) GetSessionParticipant(ctx context.Context, arg GetSessionParticipantParams) (SessionParticipant, error) {
	row := q.db.QueryRowContext(ctx, getSessionParticipant, arg.UserID, arg.SessionID)
	var i SessionParticipant
	err := row.Scan(
		&i.UserID,
		&i.SessionID,
		&i.JoinedAt,
		&i.Status,
	)
	return i, err
}

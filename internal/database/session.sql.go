// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: session.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO session (session_code, session_name, creator_user_id, status)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, session_code, session_name, creator_user_id, created_at, updated_at, status
`

type CreateSessionParams struct {
	SessionCode   string
	SessionName   string
	CreatorUserID uuid.UUID
	Status        sql.NullString
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.SessionCode,
		arg.SessionName,
		arg.CreatorUserID,
		arg.Status,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.SessionCode,
		&i.SessionName,
		&i.CreatorUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM session
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getActiveSessionByID = `-- name: GetActiveSessionByID :one
SELECT id, session_code, session_name, creator_user_id, created_at, updated_at, status 
FROM session
WHERE id = $1
`

func (q *Queries) GetActiveSessionByID(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRowContext(ctx, getActiveSessionByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.SessionCode,
		&i.SessionName,
		&i.CreatorUserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const getUserSessions = `-- name: GetUserSessions :many
SELECT id, session_code, session_name, creator_user_id, created_at, updated_at, status
FROM session
WHERE creator_user_id = $1
ORDER BY created_at DESC, id DESC
LIMIT $2 OFFSET $3
`

type GetUserSessionsParams struct {
	CreatorUserID uuid.UUID
	Limit         int32
	Offset        int32
}

func (q *Queries) GetUserSessions(ctx context.Context, arg GetUserSessionsParams) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getUserSessions, arg.CreatorUserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.SessionCode,
			&i.SessionName,
			&i.CreatorUserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionName = `-- name: UpdateSessionName :exec
UPDATE session
SET session_name = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateSessionNameParams struct {
	ID          uuid.UUID
	SessionName string
}

func (q *Queries) UpdateSessionName(ctx context.Context, arg UpdateSessionNameParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionName, arg.ID, arg.SessionName)
	return err
}

const updateSessionStatus = `-- name: UpdateSessionStatus :exec
UPDATE session
SET status = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateSessionStatusParams struct {
	ID     uuid.UUID
	Status sql.NullString
}

func (q *Queries) UpdateSessionStatus(ctx context.Context, arg UpdateSessionStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateSessionStatus, arg.ID, arg.Status)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, email, password_hash)
VALUES ($1, $2, $3)
RETURNING id, username, email, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Username     string
	Email        string
	PasswordHash string
}

type CreateUserRow struct {
	ID        uuid.UUID
	Username  string
	Email     string
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Email, arg.PasswordHash)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = NOW(), updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, created_at, updated_at, password_changed_at, deleted_at
FROM users
WHERE email = $1 AND deleted_at IS NULL
`

type GetUserByEmailRow struct {
	ID                uuid.UUID
	Username          string
	Email             string
	CreatedAt         time.Time
	UpdatedAt         time.Time
	PasswordChangedAt sql.NullTime
	DeletedAt         sql.NullTime
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordChangedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, created_at, updated_at, password_changed_at, deleted_at
FROM users
WHERE id = $1 AND deleted_at IS NULL
`

type GetUserByIDRow struct {
	ID                uuid.UUID
	Username          string
	Email             string
	CreatedAt         time.Time
	UpdatedAt         time.Time
	PasswordChangedAt sql.NullTime
	DeletedAt         sql.NullTime
}

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordChangedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, created_at, updated_at, password_changed_at, deleted_at
FROM users
WHERE username = $1 AND deleted_at IS NULL
`

type GetUserByUsernameRow struct {
	ID                uuid.UUID
	Username          string
	Email             string
	CreatedAt         time.Time
	UpdatedAt         time.Time
	PasswordChangedAt sql.NullTime
	DeletedAt         sql.NullTime
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PasswordChangedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserForLogin = `-- name: GetUserForLogin :one
SELECT id, username, email, password_hash, password_changed_at, deleted_at
FROM users
WHERE (username = $1 OR email = $1) AND deleted_at IS NULL
`

type GetUserForLoginRow struct {
	ID                uuid.UUID
	Username          string
	Email             string
	PasswordHash      string
	PasswordChangedAt sql.NullTime
	DeletedAt         sql.NullTime
}

func (q *Queries) GetUserForLogin(ctx context.Context, username string) (GetUserForLoginRow, error) {
	row := q.db.QueryRowContext(ctx, getUserForLogin, username)
	var i GetUserForLoginRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.PasswordChangedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, created_at, updated_at 
FROM users 
WHERE deleted_at IS NULL
ORDER BY created_at DESC, id DESC
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

type ListUsersRow struct {
	ID        uuid.UUID
	Username  string
	Email     string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmail = `-- name: UpdateEmail :exec
UPDATE users
SET email = $2, updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateEmailParams struct {
	ID    uuid.UUID
	Email string
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateEmail, arg.ID, arg.Email)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = $2, password_changed_at= NOW(), updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateUserPasswordParams struct {
	ID           uuid.UUID
	PasswordHash string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}

const updateUsername = `-- name: UpdateUsername :exec
UPDATE users
SET username = $2, updated_at = NOW()
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateUsernameParams struct {
	ID       uuid.UUID
	Username string
}

func (q *Queries) UpdateUsername(ctx context.Context, arg UpdateUsernameParams) error {
	_, err := q.db.ExecContext(ctx, updateUsername, arg.ID, arg.Username)
	return err
}

const userExistsByUsernameOrEmail = `-- name: UserExistsByUsernameOrEmail :one
SELECT EXISTS(SELECT 1 FROM users WHERE (username = $1 OR email = $2) AND deleted_at IS NULL)
`

type UserExistsByUsernameOrEmailParams struct {
	Username string
	Email    string
}

func (q *Queries) UserExistsByUsernameOrEmail(ctx context.Context, arg UserExistsByUsernameOrEmailParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, userExistsByUsernameOrEmail, arg.Username, arg.Email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: session_item.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/sqlc-dev/pqtype"
)

const createSessionItem = `-- name: CreateSessionItem :one
INSERT INTO session_item (
    session_id, 
    item_title, 
    item_description,
    image_url,
    source_type,
    source_id,
    metadata,
    added_by_user_id
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
RETURNING id, session_id, item_title, item_description, image_url, source_type, source_id, metadata, created_at, updated_at, added_by_user_id
`

type CreateSessionItemParams struct {
	SessionID       uuid.UUID
	ItemTitle       string
	ItemDescription sql.NullString
	ImageUrl        sql.NullString
	SourceType      string
	SourceID        sql.NullString
	Metadata        pqtype.NullRawMessage
	AddedByUserID   uuid.UUID
}

func (q *Queries) CreateSessionItem(ctx context.Context, arg CreateSessionItemParams) (SessionItem, error) {
	row := q.db.QueryRowContext(ctx, createSessionItem,
		arg.SessionID,
		arg.ItemTitle,
		arg.ItemDescription,
		arg.ImageUrl,
		arg.SourceType,
		arg.SourceID,
		arg.Metadata,
		arg.AddedByUserID,
	)
	var i SessionItem
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.ItemTitle,
		&i.ItemDescription,
		&i.ImageUrl,
		&i.SourceType,
		&i.SourceID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AddedByUserID,
	)
	return i, err
}

const deleteSessionItem = `-- name: DeleteSessionItem :exec
DELETE FROM session_item
WHERE id = $1
`

func (q *Queries) DeleteSessionItem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSessionItem, id)
	return err
}

const getSessionItemByID = `-- name: GetSessionItemByID :one
SELECT id, session_id, item_title, item_description, image_url, source_type, source_id, metadata, created_at, updated_at, added_by_user_id
FROM session_item
WHERE id = $1
`

func (q *Queries) GetSessionItemByID(ctx context.Context, id uuid.UUID) (SessionItem, error) {
	row := q.db.QueryRowContext(ctx, getSessionItemByID, id)
	var i SessionItem
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.ItemTitle,
		&i.ItemDescription,
		&i.ImageUrl,
		&i.SourceType,
		&i.SourceID,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AddedByUserID,
	)
	return i, err
}

const listSessionItems = `-- name: ListSessionItems :many
SELECT id, session_id, item_title, item_description, image_url, source_type, source_id, metadata, created_at, updated_at, added_by_user_id
FROM session_item
WHERE session_id = $1
ORDER BY created_at DESC, id DESC
LIMIT $2 OFFSET $3
`

type ListSessionItemsParams struct {
	SessionID uuid.UUID
	Limit     int32
	Offset    int32
}

func (q *Queries) ListSessionItems(ctx context.Context, arg ListSessionItemsParams) ([]SessionItem, error) {
	rows, err := q.db.QueryContext(ctx, listSessionItems, arg.SessionID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SessionItem
	for rows.Next() {
		var i SessionItem
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.ItemTitle,
			&i.ItemDescription,
			&i.ImageUrl,
			&i.SourceType,
			&i.SourceID,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AddedByUserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItemDescription = `-- name: UpdateItemDescription :exec
UPDATE session_item
SET item_description = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateItemDescriptionParams struct {
	ID              uuid.UUID
	ItemDescription sql.NullString
}

func (q *Queries) UpdateItemDescription(ctx context.Context, arg UpdateItemDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateItemDescription, arg.ID, arg.ItemDescription)
	return err
}

const updateItemImage = `-- name: UpdateItemImage :exec
UPDATE session_item
SET image_url = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateItemImageParams struct {
	ID       uuid.UUID
	ImageUrl sql.NullString
}

func (q *Queries) UpdateItemImage(ctx context.Context, arg UpdateItemImageParams) error {
	_, err := q.db.ExecContext(ctx, updateItemImage, arg.ID, arg.ImageUrl)
	return err
}

const updateItemTitle = `-- name: UpdateItemTitle :exec
UPDATE session_item
SET item_title = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateItemTitleParams struct {
	ID        uuid.UUID
	ItemTitle string
}

func (q *Queries) UpdateItemTitle(ctx context.Context, arg UpdateItemTitleParams) error {
	_, err := q.db.ExecContext(ctx, updateItemTitle, arg.ID, arg.ItemTitle)
	return err
}
